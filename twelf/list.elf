list : type.
nil : list.
asdf : type.
cons :  asdf -> list -> list .

unit : asdf.

app : list -> list -> list -> type.
%mode app +L1 +L2 -L3.
app/nil : app nil L L.
app/cons : app (cons X XS) YS (cons X ZS) <- app XS YS ZS.
%worlds () (app _ _ _).
%total L1 (app L1 L2 L3).

rhnil : {L : list } app L nil L -> type.
%mode rhnil +L -D.
rhnil/nil : rhnil nil app/nil.
rhnil/cons : rhnil (cons X XS) (app/cons D) <- rhnil XS D.
%worlds () (rhnil _ _).
%total L (rhnil L _ ).

assoc_app : app L1 L2 R -> app L2 L3 S -> app L1 S T -> app R L3 T -> type.
%mode assoc_app +D1 +D2 -D3 -D4.
assoc_app/nil : assoc_app app/nil D app/nil D.
assoc_app/cons : assoc_app (app/cons D1) D2 (app/cons D3) (app/cons D4)
		  <- assoc_app D1 D2 D3 D4.
%worlds () (assoc_app _ _ _ _).
%total D1 (assoc_app D1 D2 _ _).

rev_aux : list -> list -> list -> type.
%mode rev_aux +L1 +L2 -L3.
rev_aux/nil : rev_aux nil L L.
rev_aux/cons : rev_aux (cons X XS) YS ZS <- rev_aux XS (cons X YS) ZS.
%worlds () (rev_aux _ _ _).
%total L1 (rev_aux  L1 L2 _). 

rev : list -> list -> type.
%mode rev +L1 -L2.
rev/nil : rev nil nil.
rev/cons : rev XS YS <- rev_aux XS nil YS .
%worlds () (rev _ _).
%total L (rev L _ ).


rev1 : list -> list -> type.
%mode rev1 +L1 -L2.
rev1/nil : rev1 nil nil.
rev1/cons : app YS (cons X nil) ZS -> rev1 XS YS -> rev1 (cons X XS) ZS.
%worlds () (rev1 _ _).
%total L (rev1 L R).

rev1_distr : app L1 L2 L3 -> rev1 L1 L5 -> rev1 L2 L6 -> rev1 L3 L4 -> app L6 L5 L4 -> type.
%mode rev1_distr +A1 +R1 +R2 -R3 -A2.
%% rev ( [] ++ ys ) = rev ys = rev ys ++ [] = rev ys ++ rev []
%% rev ( x:xs ++ ys) = rev (x : (xs ++ ys)) = rev (xs ++ ys) ++ [x] = rev ys ++ rev xs ++ [x] = rev ys ++ rev (x:xs)
rev1_distr/nil : rev1_distr app/nil rev1/nil (D1 : rev1 L R) D1 D <- rhnil R D.
rev1_distr/cos : rev1_distr (app/cons A1) (rev1/cons A3 R1) D1 (rev1/cons Z R2) A
		  <- rev1_distr A1 R1 D1 R2 A2 
		  <- assoc_app A2 A3 A Z . %% (rev ys ++ rev xs) ++ [x] = rev ys ++ (rev xs ++ [x])
%worlds () (rev1_distr _ _ _ _ _).
%total A (rev1_distr A R1 R2 _ _).

revOne : {X : asdf } rev1 (cons X nil) (cons X nil) -> type.
%mode revOne +X -R.
-: revOne X (rev1/cons app/nil rev1/nil).
%worlds () (revOne _ _).
%total X (revOne X  _ ).

revrev : rev1 L1 L2 -> rev1 L2 L1 -> type.
%% rev (rev xs) = rev (rev xs ++ [x])  = rev [x] ++ rev (rev xs) = [x] ++ xs = x:xs
%mode revrev +L1 -L2.
revrev/nil : revrev rev1/nil rev1/nil.
revrev/cons : revrev (rev1/cons (A : app XS (cons X nil) ZS) D) D1
     	       <- revOne X X1  
	       <- revrev D R1
	       <- rev1_distr A R1 X1 D1 _ .
%worlds () (revrev _ _).
%total R (revrev R _).
